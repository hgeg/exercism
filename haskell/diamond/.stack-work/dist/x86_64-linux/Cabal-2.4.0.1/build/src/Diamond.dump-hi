
==================== FINAL INTERFACE ====================
2019-03-05 15:13:47.81615844 UTC

interface diamond-1.1.0.4-5wjeagIbK427b4o7prRbfK:Diamond 8063
  interface hash: 32e6142708a2ffb9079a4105dea077d8
  ABI hash: 985253bc7b07d378d13c4aaa6a753b2a
  export-list hash: 06247d6ba9d4ccf0143455a53e35a085
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d59a86fc39dabe8754ebbfb830e37f1e
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Diamond.diamond
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
921627fa30f5f35eca67b0d8973f4984
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Diamond.$trModule3
                   Diamond.$trModule1) -}
1b1d923efb3c63f1b3782000c112b38a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Diamond.$trModule2) -}
200e38109cbdb573445064366778d609
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Diamond"#) -}
ac2ae1465b65699c9fc145956862c610
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Diamond.$trModule4) -}
1cc705af0f29e761ab7000fadbe48078
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("diamond-1.1.0.4-5wjeagIbK427b4o7prRbfK"#) -}
6824c97b040410501258d2e3b52df638
  $wdiamond :: GHC.Prim.Char# -> GHC.Maybe.Maybe [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 case GHC.Prim.ltChar# ww 'A'# of lwild {
                   DEFAULT
                   -> case GHC.Prim.gtChar# ww 'Z'# of lwild1 {
                        DEFAULT
                        -> GHC.Maybe.Just
                             @ [GHC.Base.String]
                             (let {
                                y :: GHC.Prim.Int# = GHC.Prim.ord# ww
                              } in
                              let {
                                lvl1 :: [GHC.Types.Char]
                                = GHC.List.reverse1
                                    @ GHC.Types.Char
                                    (GHC.Enum.eftChar 65# y)
                                    (GHC.Types.[] @ GHC.Types.Char)
                              } in
                              letrec {
                                go :: GHC.Prim.Int# -> [[GHC.Types.Char]]
                                  {- Arity: 1, Strictness: <S,U> -}
                                = \ (x :: GHC.Prim.Int#) ->
                                  case GHC.Prim.># x y of lwild2 {
                                    DEFAULT
                                    -> GHC.Types.:
                                         @ [GHC.Types.Char]
                                         (let {
                                            x1 :: GHC.Prim.Char# = GHC.Prim.chr# x
                                          } in
                                          let {
                                            lvl2 :: GHC.Types.Char = GHC.Types.C# x1
                                          } in
                                          Diamond.mirrored
                                            @ GHC.Types.Char
                                            (GHC.Base.map
                                               @ GHC.Types.Char
                                               @ GHC.Types.Char
                                               (\ (x2 :: GHC.Types.Char) ->
                                                case x2 of wild1 { GHC.Types.C# y1 ->
                                                case GHC.Prim.eqChar# x1 y1 of lwild3 {
                                                  DEFAULT -> Diamond.diamond1 1# -> lvl2 } })
                                               lvl1))
                                         (go (GHC.Prim.+# x 1#))
                                    1# -> GHC.Types.[] @ [GHC.Types.Char] }
                              } in
                              Diamond.mirrored @ GHC.Base.String (go 65#))
                        1# -> GHC.Maybe.Nothing @ [GHC.Base.String] }
                   1# -> GHC.Maybe.Nothing @ [GHC.Base.String] }) -}
6e6f8be12f118abceb9e0d33c5979bce
  diamond :: GHC.Types.Char -> GHC.Maybe.Maybe [GHC.Base.String]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 -> Diamond.$wdiamond ww1 }) -}
aaac7ae7bb8f0be47961e0b505a1cdda
  diamond1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
8ae7a058a4706e4ef2f6970df01726ce
  diamond2 :: ([a])
  {- Strictness: x -}
8bb9304626452757c089f003715d1ce5
  mirrored :: [a] -> [a]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [a]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ a
                   : ipv ipv1
                   -> GHC.Base.++_$s++
                        @ a
                        (case GHC.List.reverse1 @ a wild (GHC.Types.[] @ a) of wild1 {
                           [] -> case Diamond.diamond2 ret_ty [a] of {} : ds1 rs -> rs })
                        ipv
                        ipv1 }) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

