
==================== FINAL INTERFACE ====================
2019-04-26 10:35:43.479836021 UTC

interface main:Main 8063
  interface hash: a4d898ed85f8327dc7c7a654c74a5448
  ABI hash: 22ca7f7ab3bf4c360f3093c299b1fe97
  export-list hash: b13868694cf83fbf6c411b9fea123761
  orphan hash: c593e88250f06e39a5b873b8608b91c7
  flag hash: b167e9012e18ebd7fcca80ad4fcc5f3a
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.12.6.1
                      ansi-terminal-0.8.2 array-0.5.3.0 base-4.12.0.0 call-stack-0.1.0
                      clock-0.7.2 colour-2.3.4 containers-0.6.0.1 deepseq-1.4.4.0
                      directory-1.3.3.0 erf-2.0.0.0 filepath-1.4.2.1 ghc-boot-th-8.6.3
                      ghc-prim-0.5.3 hspec-2.6.1 hspec-core-2.6.1
                      hspec-expectations-0.8.2 integer-gmp-1.0.2.0 pretty-1.1.3.6
                      primitive-0.6.4.0 quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3
                      stm-2.5.0.0 template-haskell-2.14.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2 word-count-1.2.0.6
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         stm-2.5.0.0:Control.Monad.STM base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal
                         ghc-boot-th-8.6.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.3:GHC.LanguageExtensions.Type
                         hspec-core-2.6.1:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.12.0.0:Data.Bifunctor 5b0364c19dacbd8c7945623465593ba3
import  -/  base-4.12.0.0:Data.Char 0f6e335e98e2ddac4f2764f212d2f08a
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Exts 58e5bca8f570d616251e5656df9ffb9c
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Unicode e72f63c0b07b1495548f1f84ce6c22b5
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  hspec-2.6.1:Test.Hspec c52a199c01d155b6c376cbd0a4a261b7
import  -/  hspec-2.6.1:Test.Hspec.Runner 39e1760b5bfbd4f0824e3dccdadb61a9
import  -/  hspec-core-2.6.1:Test.Hspec.Core.Config.Options 07b070c47ecdbfb1b5f2b3639db0332c
import  -/  hspec-core-2.6.1:Test.Hspec.Core.Runner 35c8ba26e7391d11dec0c73fd7ee36af
import  -/  hspec-core-2.6.1:Test.Hspec.Core.Spec c97919274f9cd42d688210d5a3e73f0b
import  -/  hspec-core-2.6.1:Test.Hspec.Core.Spec.Monad 2def4346bff2afc244a1f1eb77d09dc0
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 6ed51b2bcb1c0ac264d079371bd72d2a
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 7f56f3d142debd8666df241a1ddc7887
import  -/  word-count-1.2.0.6:WordCount 90d771fe2003cd84868775407e4be926
90dc2e09ddfc462a8d20b3e0ff17ddf5
  $s$fEq(,) ::
    GHC.Classes.Eq ([GHC.Types.Char], GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Integer.Type.Integer)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ GHC.Integer.Type.Integer
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     GHC.Integer.Type.$fEqInteger)
                  Main.$s$fEq(,)_$s$fEq(,)_$c/= -}
b61961d44dcdd3b3fd1cd8443131f591
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    ([GHC.Types.Char], GHC.Integer.Type.Integer)
    -> ([GHC.Types.Char], GHC.Integer.Type.Integer) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: ([GHC.Types.Char], GHC.Integer.Type.Integer))
                   (y :: ([GHC.Types.Char], GHC.Integer.Type.Integer)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Base.eqString a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Integer.Type.eqInteger# a2 b2 of wild4 {
                        DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } }) -}
c4cb6905ff2e792a3719cedcec380b2b
  $s$fShow(,) ::
    GHC.Show.Show ([GHC.Types.Char], GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Integer.Type.Integer)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Integer.Type.Integer
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInteger)
                  (\ (x :: ([GHC.Types.Char], GHC.Integer.Type.Integer)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Integer.Type.Integer
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInteger
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [([GHC.Types.Char], GHC.Integer.Type.Integer)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ ([GHC.Types.Char], GHC.Integer.Type.Integer)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ GHC.Integer.Type.Integer
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
0aa705a2fcf0449cdc7bad08805c7a68
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
12604f78431514e8a018598b58b31d79
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
91552935e71c0f94b48ce0099780927a
  data Case
    = Case {description :: GHC.Base.String,
            input :: GHC.Base.String,
            expected :: [(GHC.Base.String, GHC.Integer.Type.Integer)]}
91552935e71c0f94b48ce0099780927a
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
91552935e71c0f94b48ce0099780927a
  expected ::
    Main.Case -> [(GHC.Base.String, GHC.Integer.Type.Integer)]
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
91552935e71c0f94b48ce0099780927a
  input :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
c369535b928a88a8792013953687c509
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9af729a484cdcc8cc289a1c1944d16ab
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Hspec.Core.Runner.hspecWith1
                   Main.main3
                   Main.main2
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
8d46947d8ccac8129d75a3e73b5ec5e0
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.Tree
              (Test.Hspec.Core.Example.ActionWith ())
              (Test.Hspec.Core.Tree.Item ())]) #)
  {- Arity: 1, Strictness: <S,U> -}
2f426bb94b2f6e728b28d0f51f47548c
  main3 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Maybe.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Maybe.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Maybe.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Maybe.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Maybe.Nothing @ GHC.Types.Int)
                   (GHC.Maybe.Nothing @ GHC.Types.Int)
                   (GHC.Maybe.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Maybe.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Maybe.Nothing @ GHC.Types.Int)) -}
42873ca1537236400e1dd84becce3315
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fEq(,) @ [Char] @ Integer" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                GHC.Integer.Type.Integer)
                                                       (v :: GHC.Classes.Eq [GHC.Types.Char])
  GHC.Classes.$fEq(,) @ [GHC.Types.Char]
                      @ GHC.Integer.Type.Integer
                      v
                      v1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,)_$c/= @ [Char] @ Integer" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                        GHC.Integer.Type.Integer)
                                                            ($dEq :: GHC.Classes.Eq
                                                                       [GHC.Types.Char])
  GHC.Classes.$fEq(,)_$c/= @ [GHC.Types.Char]
                           @ GHC.Integer.Type.Integer
                           $dEq
                           $dEq1
  = Main.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Main $fShow(,) @ [Char] @ Integer" [orphan] forall (v1 :: GHC.Show.Show
                                                                  GHC.Integer.Type.Integer)
                                                         (v :: GHC.Show.Show [GHC.Types.Char])
  GHC.Show.$fShow(,) @ [GHC.Types.Char]
                     @ GHC.Integer.Type.Integer
                     v
                     v1
  = Main.$s$fShow(,)
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

