
==================== FINAL INTERFACE ====================
2019-02-23 12:26:07.701811559 UTC

interface nth-prime-2.1.0.6-IYMZAtVkERWC7MySq5Ddf1:Prime 8063
  interface hash: 957a9cbd8a67126bb8e949a2a32e5ecb
  ABI hash: 2f3648ddd541f547973c5c0abb4671c8
  export-list hash: 75c26f2d1a33b7e3433dfa47cb6ded8b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d59a86fc39dabe8754ebbfb830e37f1e
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Prime.nth
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Float b958d4f9aada71a4e6641f5c6bbcbc30
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 7f56f3d142debd8666df241a1ddc7887
65bd05a5cdd21cdec29624b5ce95520a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Prime.$trModule3 Prime.$trModule1) -}
28a84ee8f2501f0634f039b7f843c566
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Prime.$trModule2) -}
5311ed449d7e7b59114b4771cad72bc8
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prime"#) -}
9a91b517e8b722ca072916fd87407824
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Prime.$trModule4) -}
69a8794e15ffc62dfd9682148e05b2bf
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("nth-prime-2.1.0.6-IYMZAtVkERWC7MySq5Ddf1"#) -}
c28ff75c0e1dbe15bf73d4029053e1cf
  $wgo ::
    GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, [GHC.Integer.Type.Integer] #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2] -}
d38bc58e26fb74410880cd72e75ae988
  $wnth :: GHC.Prim.Int# -> GHC.Maybe.Maybe GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.># ww 0# of lwild {
                   DEFAULT -> GHC.Maybe.Nothing @ GHC.Integer.Type.Integer
                   1#
                   -> GHC.Maybe.Just
                        @ GHC.Integer.Type.Integer
                        (let {
                           n :: GHC.Prim.Int# = GHC.Prim.-# ww 1#
                         } in
                         case GHC.Prim.<=# n 0# of lwild1 {
                           DEFAULT
                           -> case Prime.$wunsafeDrop
                                     @ GHC.Integer.Type.Integer
                                     n
                                     Prime.primes of wild {
                                [] -> GHC.List.badHead @ GHC.Integer.Type.Integer : x ds1 -> x }
                           1# -> Prime.nth1 }) }) -}
0ac3e938f7bbdb6f223dd1c69a0eb32c
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [2] -}
aa768ad85d5dbd2d931bbe9c0aa80ad1
  nth :: GHC.Types.Int -> GHC.Maybe.Maybe GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Prime.$wnth ww1 }) -}
83c91699f256cf155b20fe8281e7e716
  nth1 :: GHC.Integer.Type.Integer
  {- Unfolding: (case Prime.primes of wild {
                   [] -> GHC.List.badHead @ GHC.Integer.Type.Integer
                   : x ds1 -> x }) -}
34988ad68c9e0c934cbea3b3077a902c
  nth2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
1503e4c6d920e40c30e1b320350f86b0
  primes :: [GHC.Integer.Type.Integer]
  {- Unfolding: (case Prime.$wgo Prime.nth2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Integer.Type.Integer ww1 ww2 }) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

