
==================== FINAL INTERFACE ====================
2019-02-23 10:48:12.436642565 UTC

interface crypto-square-3.2.0.6-B21KFc0ThM771vJbEB1utf:CryptoSquare 8063
  interface hash: 8b736a0e46394fa677667108dcd6e88c
  ABI hash: 615472b427cda4aed22a356afa697708
  export-list hash: e0b34a857e069408fbd17b4985b7fe9a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d59a86fc39dabe8754ebbfb830e37f1e
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  CryptoSquare.encode
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.Char 0f6e335e98e2ddac4f2764f212d2f08a
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Float b958d4f9aada71a4e6641f5c6bbcbc30
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Unicode e72f63c0b07b1495548f1f84ce6c22b5
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
4170eb97a529e3b65f457624a3e2fdac
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CryptoSquare.$trModule3
                   CryptoSquare.$trModule1) -}
8f63ed4498bf6fb9df2763646726bd46
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS CryptoSquare.$trModule2) -}
a222382ab4d13d1e68662cdbdc86c872
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CryptoSquare"#) -}
8846398422866c28bd096d2184289403
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS CryptoSquare.$trModule4) -}
10b0945fa6bb611512a6c3393770518c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("crypto-square-3.2.0.6-B21KFc0ThM771vJbEB1utf"#) -}
bd2393e5ce1fda21be12097035476701
  $wchunkify :: GHC.Prim.Int# -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [2] -}
3ee5834fa2b7e49a6da0a90ec1c8cdf7
  $wsplit ::
    GHC.Prim.Int#
    -> GHC.Base.String -> (# GHC.Base.String, [GHC.Base.String] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [2] -}
1ef4573bf2dc5fb66425d3d8dfa30d44
  encode :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 let {
                   normalized :: [GHC.Types.Char] = CryptoSquare.encode_go1 xs
                 } in
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        normalized
                        0# of ww2 { DEFAULT ->
                 let {
                   x :: GHC.Prim.Double#
                   = GHC.Prim.sqrtDouble# (GHC.Prim.int2Double# ww2)
                 } in
                 let {
                   n :: GHC.Prim.Int# = GHC.Prim.double2Int# x
                 } in
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Base.String
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (ww :: GHC.Prim.Int#)[OneShot] ->
                     case GHC.Prim./##
                            (GHC.Prim.int2Double# ww2)
                            (GHC.Prim.int2Double# ww) of wild2 { DEFAULT ->
                     let {
                       n1 :: GHC.Prim.Int# = GHC.Prim.double2Int# wild2
                     } in
                     let {
                       $j1 :: GHC.Prim.Int# -> GHC.Base.String
                         <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ww1 :: GHC.Prim.Int#)[OneShot] ->
                         case CryptoSquare.$wsplit ww normalized of ww3 { (#,#) ww4 ww5 ->
                         CryptoSquare.$wchunkify
                           ww1
                           (CryptoSquare.encode_go
                              (CryptoSquare.transpose (GHC.Types.: @ GHC.Base.String ww4 ww5))) }
                     } in
                     case GHC.Prim.<## (GHC.Prim.int2Double# n1) wild2 of lwild {
                       DEFAULT -> $j1 n1 1# -> $j1 (GHC.Prim.+# n1 1#) } }
                 } in
                 case GHC.Prim.<## (GHC.Prim.int2Double# n) x of lwild {
                   DEFAULT -> $j n 1# -> $j (GHC.Prim.+# n 1#) } }) -}
a87cc2635d2b91447c0650d9434610e8
  encode_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
99502b3cd130ccf17fc4738a3cfc2462
  encode_go1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
1c3004350cb781592965d61d1e9160c6
  transpose :: [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

